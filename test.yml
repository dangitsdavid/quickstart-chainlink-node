AWSTemplateFormatVersion: '2010-09-09'
Description: Start Chainlink Node Quick Start
Metadata:
  QuickStartDocumentation:
    EntrypointName: 'Launch into a new VPC'
    Order: '1'
  LICENSE: MIT License (MIT)
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - AvailabilityZones
          - VPCCIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - RemoteAccessCIDR
          - VPCTenancy
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
          - BastionAMIOS
          - BastionInstanceType
          - ChainlinkNodeInstanceType
          - ChainlinkNodeRootVolumeSize
      - Label:
          default: Linux bastion configuration
        Parameters:
          - NumBastionHosts
          - BastionHostName
          - BastionTenancy
          - EnableBanner
          - BastionBanner
          - EnableTCPForwarding
          - EnableX11Forwarding
      - Label:
          default: Chainlink Node configuration
        Parameters:
          - BlockchainNetwork
          - ChainlinkNodeGUIEmail
          - ChainlinkNodeGUIPassword
          - EthereumNodeUrl
          - NodeWalletPassword
      - Label:
          default: Aurora PostreSQL configuration
        Parameters:
          - DBName
          - DBMasterUsername
          - DBMasterUserPassword
          - DBPort
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
          - QSS3BucketRegion

    ParameterLabels:
      # network config labels
      AvailabilityZones:
        default: Availability Zones
      VPCCIDR:
        default: VPC CIDR
      PublicSubnet1CIDR:
        default: Public subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public subnet 2 CIDR
      PrivateSubnet1CIDR:
        default: Private subnet 1 CIDR
      PrivateSubnet2CIDR:
        default: Private subnet 2 CIDR
      RemoteAccessCIDR:
        default: Allowed bastion external access CIDR
      VPCTenancy:
        default: VPC tenancy

      # amazon ec2 config labels
      KeyPairName:
        default: SSH Key pair name
      BastionAMIOS:
        default: Bastion AMI operating system
      ChainlinkNodeInstanceType:
        default: Chainlink node instance type
      ChainlinkNodeRootVolumeSize:
        default: Chainlink Node root volume size

      # linux bastion config labels
      NumBastionHosts:
        default: Number of bastion hosts
      BastionHostName:
        default: Bastion host name
      BastionTenancy:
        default: Bastion tenancy
      BastionBanner:
        default: Banner text
      EnableBanner:
        default: Bastion banner
      EnableTCPForwarding:
        default: TCP forwarding
      EnableX11Forwarding:
        default: X11 forwarding

      # chainlink node configuration labels
      BlockchainNetwork:
        default: Blockchain Network
      ChainlinkNodeGUIEmail:
        default: Chainlink Node GUI Email
      ChainlinkNodeGUIPassword:
        default: Chainlink Node GUI Password
      EthereumNodeUrl:
        default: Ethereum Node Websocket Url
      NodeWalletPassword:
        default: Chainlink Node Wallet Password

      # db config labels
      DBName:
        default: Database name
      DBMasterUsername:
        default: Database master username
      DBMasterUserPassword:
        default: Database master password
      DBPort:
        default: Database port

      # qs config labels
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      QSS3BucketRegion:
        default: Quick Start S3 bucket Region

  cfn-lint: { config: { ignore_checks: [E9007] } }

Parameters:
  # Availability Zone Configuration
  AvailabilityZones:
    Description: 'Select 2 Availability Zones to use for the subnets in the VPC.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR Block for the VPC.
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR Block for the public DMZ subnet 1, located in Availability Zone 1.
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR Block for the public DMZ subnet 2, located in Availability Zone 2.
    Type: String
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1, located in Availability Zone 1.
    Type: String
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2, located in Availability Zone 2.
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for external SSH access to the bastions and Chainlink node UI
    Default: 0.0.0.0/0
    Type: String
  VPCTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC.
    Type: String

  # Amazon EC2 Configuration
  KeyPairName:
    Description: Name of an existing public/private key pair. If you do not have one in this AWS Region,
      please create it before continuing.
    Type: 'AWS::EC2::KeyPair::KeyName'
  BastionAMIOS:
    AllowedValues:
      - Amazon-Linux2-HVM
      - CentOS-7-HVM
      - Ubuntu-Server-20.04-LTS-HVM
      - SUSE-SLES-15-HVM
    Default: Amazon-Linux2-HVM
    Description: The Linux distribution for the AMI to be used for the bastion instances.
    Type: String
  BastionInstanceType:
    Description: Amazon EC2 instance type for the bastion instances.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t3.micro
      - t3.small
      - t3.medium
      - m3.large
      - m3.xlarge
  ChainlinkNodeInstanceType:
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - c5.xlarge
    Default: t3.small
    Description: Amazon EC2 instance type for the Chainlink Nodes instances.
    Type: String
  ChainlinkNodeRootVolumeSize:
    Description: The size in GB for the root EBS volume for Chainlink Nodes.
    Type: Number
    Default: '30'
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  # bastion host config
  NumBastionHosts:
    AllowedValues:
      - '1'
      - '2'
    Default: '1'
    Description: The number of bastion hosts to create. The maximum number is two.
    Type: String
  BastionHostName:
    Default: 'LinuxBastion'
    Description: The value used for the name tag of the bastion host.
    Type: String
  BastionTenancy:
    Description: Bastion VPC tenancy (dedicated or default).
    Type: String
    Default: default
    AllowedValues:
      - dedicated
      - default
  EnableBanner:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Choose *true* to display a banner when connecting via SSH to the bastion.
    Type: String
  BastionBanner:
    Default: ''
    Description: Banner text to display upon login.
    Type: String
  EnableTCPForwarding:
    Type: String
    Description: To enable TCP forwarding, choose *true*.
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  EnableX11Forwarding:
    Type: String
    Description: To enable X11 forwarding, choose *true*.
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

  # blockchain config
  BlockchainNetwork:
    AllowedValues:
      - ETH-Mainnet
      - Kovan-ETH-Testnet
      - Rinkeby-ETH-Testnet
      - xDai-Mainnet
      - Heco-Mainnet
      - BSC-Mainnet
      - Matic-Mainnet
    Default: Kovan-ETH-Testnet
    Description: 'Blockchain Network to run Chainlink Node.'
    Type: String
  ChainlinkNodeGUIEmail:
    Default: chainlinkuser@email.com
    Description: 'The Chainlink Node GUI Email.'
    MaxLength: 64
    MinLength: 1
    Type: String
  ChainlinkNodeGUIPassword:
    Description: 'The Chainlink Node GUI Password.'
    MaxLength: 64
    MinLength: 8
    NoEcho: 'True'
    Type: String
  EthereumNodeUrl:
    Default: 'wss://ethUrl'
    Description: 'Please provide websocket endpoint for an ETH node'
    MaxLength: 128
    MinLength: 6
    Type: String
  NodeWalletPassword:
    Description: 'Node Wallet password must container 3 capital letters, 3 lowercase letters, 3 numbers, and 3 special characters.'
    MaxLength: 32
    MinLength: 9
    NoEcho: 'True'
    Type: String

  # PostreSQL DB Configuration
  DBName: 
    AllowedPattern: '[a-zA-Z0-9]*'
    Description: 'Name of the Amazon Aurora database.'
    MaxLength: 64
    MinLength: 0
    Default: 'PostgresDB'
    Type: String
  DBMasterUsername: 
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: 'Must begin with a letter and contain only alphanumeric characters.'
    Default: postgresadmin
    Description: 'The database admin account username.'
    MaxLength: 16
    MinLength: 1
    Type: String
  DBMasterUserPassword:
    Description: The database admin account password. Do not end the password with a special character, this wil cause issues connecting to database. Must contain at least 1 uppercase letter, 1 lowercase letter, and a symbol (non / @ " ' ).
    MaxLength: 64
    MinLength: 8
    NoEcho: 'True'
    Type: String
  DBPort:
    Default: 5432
    Description: 'The port the instance will listen for connections on.'
    Type: Number
    ConstraintDescription: 'Must be in the range [1150-65535].'
    MinValue: 1150
    MaxValue: 65535
  DBHostname:
    Type: String
    Default: 'test'

  # qs config params
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: The Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a 
      hyphen (-).
    Default: aws-quickstart
    Description: Name of the S3 bucket for your copy of the Quick Start assets. 
      Keep the default name unless you are customizing the template. 
      Changing the name updates code references to point to a new Quick 
      Start location. This name can include numbers, lowercase letters, 
      uppercase letters, and hyphens, but do not start or end with a hyphen (-). 
      See https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^([0-9a-zA-Z-.]+/)*$
    ConstraintDescription: The Quick Start S3 key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slashes (/).
    Default: quickstart-amazon-aurora-postgresql/
    Description: S3 key prefix that is used to simulate a directory for your copy of the 
      Quick Start assets. Keep the default prefix unless you are customizing 
      the template. Changing this prefix updates code references to point to 
      a new Quick Start location. This prefix can include numbers, lowercase 
      letters, uppercase letters, hyphens (-), and forward slashes (/). End with a forward slash. 
      See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html 
      and https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'AWS Region where the Quick Start S3 bucket (QSS3BucketName) is 
    hosted. Keep the default Region unless you are customizing the template. 
    Changing this Region updates code references to point to a new Quick Start location. 
    When using your own bucket, specify the Region. 
    See https://aws-quickstart.github.io/option1.html.'
    Type: String

Conditions:
  UsingDefaultBucket: !Equals
    - !Ref QSS3BucketName
    - 'aws-quickstart'

Resources:
  ###################################################
  # vpc-stack (KEEP FOR PROD - main stack w/ new VPC)
  ###################################################
  VPCStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/quickstart-linux-bastion/submodules/quickstart-aws-vpc/templates/aws-vpc.template.yaml
        - S3Bucket: !If
            - UsingDefaultBucket
            - !Sub 'aws-quickstart-${AWS::Region}'
            - !Ref 'QSS3BucketName'
          S3Region: !If
            - UsingDefaultBucket
            - !Ref 'AWS::Region'
            - !Ref 'QSS3BucketRegion'
      Parameters:
        AvailabilityZones: !Join 
          - ','
          - !Ref AvailabilityZones
        NumberOfAZs: '2'
        PrivateSubnet1ACIDR: !Ref PrivateSubnet1CIDR
        PrivateSubnet2ACIDR: !Ref PrivateSubnet2CIDR
        PublicSubnet1CIDR: !Ref PublicSubnet1CIDR
        PublicSubnet2CIDR: !Ref PublicSubnet2CIDR
        VPCCIDR: !Ref VPCCIDR
        VPCTenancy: !Ref VPCTenancy

  #############################################################
  # bastion-stack (REMOVE FOR PROD and place in workload stack)
  #############################################################
  BastionStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/quickstart-linux-bastion/templates/linux-bastion.template
        - S3Bucket: !If
            - UsingDefaultBucket
            - !Sub 'aws-quickstart-${AWS::Region}'
            - !Ref 'QSS3BucketName'
          S3Region: !If
            - UsingDefaultBucket
            - !Ref 'AWS::Region'
            - !Ref 'QSS3BucketRegion'
      Parameters:
        BastionAMIOS: !Ref BastionAMIOS
        BastionHostName: !Ref BastionHostName
        BastionBanner: !Ref BastionBanner
        BastionInstanceType: !Ref BastionInstanceType
        BastionTenancy: !Ref BastionTenancy
        EnableBanner: !Ref EnableBanner
        EnableTCPForwarding: !Ref EnableTCPForwarding
        EnableX11Forwarding: !Ref EnableX11Forwarding
        KeyPairName: !Ref KeyPairName
        NumBastionHosts: !Ref NumBastionHosts
        PublicSubnet1ID: !GetAtt 
          - VPCStack
          - Outputs.PublicSubnet1ID
        PublicSubnet2ID: !GetAtt 
          - VPCStack
          - Outputs.PublicSubnet2ID
        QSS3BucketRegion: !Ref QSS3BucketRegion
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Sub ${QSS3KeyPrefix}submodules/quickstart-linux-bastion/
        RemoteAccessCIDR: !Ref RemoteAccessCIDR
        VPCID: !GetAtt 
          - VPCStack
          - Outputs.VPCID

  # chainlink-node-cfn-test
  ChainlinkNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enables SSH Access to Chainlink Nodes
      VpcId: !GetAtt 
        - VPCStack
        - Outputs.VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !GetAtt VPCStack.Outputs.VPCCIDR
        - IpProtocol: tcp
          FromPort: 6688
          ToPort: 6688
          CidrIp: !GetAtt VPCStack.Outputs.VPCCIDR
  ChainlinkNodeAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref ChainlinkNodeLaunchConfiguration
      VPCZoneIdentifier:
        - !GetAtt VPCStack.Outputs.PrivateSubnet1AID
        - !GetAtt VPCStack.Outputs.PrivateSubnet2AID
      MinSize: '2'
      MaxSize: '2'
      Cooldown: '300'
      DesiredCapacity: '2'
      Tags:
        - Key: Name
          Value: !Sub 'ChainlinkNode-${AWS::Partition}'
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref ChainlinkNodeTargetGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  ChainlinkNodeLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
          AWS::CloudFormation::Init:
              configSets:
                ec2_bootstrap:
                  # - common-init
                  - install-pkg
                  - create-env
                  - install-docker
              # common-init:
              #   commands:
              #     01-store-chainnetwork-var:
              #       command: !Sub "echo 'chainNetwork=${BlockchainNetwork}' >> /etc/environment"
              #     02-store-blockchainrpc-var:
              #       command: !Sub "echo 'ethUrl=${EthereumNodeUrl}' >> /etc/environment"
              #     03-store-dbuser-var:
              #       command: !Sub "echo 'psqlUser=${DBMasterUsername}' >> /etc/environment"
              #     04-store-dbpwd-var:
              #       command: !Sub "echo 'psqlPwd=${DBMasterUserPassword}' >> /etc/environment"
              #     05-store-dbhostname-var:
              #       command: !Sub "echo 'psqlHostname=${DBHostname}' >> /etc/environment"
              #     06-store-dbport-var:
              #       command: !Sub "echo 'psqlPort=${DBPort}' >> /etc/environment"
              #     07-store-dbname-var:
              #       command: !Sub "echo 'psqlDb=${DBName}' >> /etc/environment"
              #     08-store-apiuser-var:
              #       command: !Sub "echo 'apiUser=${ChainlinkNodeGUIEmail}' >> /etc/environment"
              #     09-store-apipwd-var:
              #       command: !Sub "echo 'apiPwd=${ChainlinkNodeGUIPassword}' >> /etc/environment"
              #     10-store-walletpwd-var:
              #       command: !Sub "echo 'walletPwd=${NodeWalletPassword}' >> /etc/environment"
              #     11-create-chainlink-dir:
              #       command: !Sub "mkdir /home/ec2-user/.chainlink"
              install-pkg:
                packages:
                  yum:
                    jq: []
                    awscli: []
              create-env:
                packages:
                  yum:
                    wget: []
                commands:
                  01-dl-script:
                    command:
                      wget -O test.sh https://raw.githubusercontent.com/dangitsdavid/test/main/test.sh
                  02-script-permission:
                    command:
                      chmod +x test.sh
                  03-create-env-file:
                    command:
                      sudo bash test.sh
              install-docker:
                packages:
                  yum:
                    docker: []
                services:
                  sysvinit:
                    docker:
                      enabled: "true"
                      ensureRunning: "true"
                commands:
                  01-system-ctl-docker:
                    command: systemctl start docker
                  02-docker-for-ec2-user:
                    command: gpasswd -a ec2-user docker
                  03-run-chainlink-docker:
                    command: |
                      cd /home/ec2-user/.chainlink && docker run -d \
                        --log-driver=awslogs \
                        --log-opt awslogs-group=ChainlinkLogs \
                        --restart unless-stopped \
                        --name chainlink \
                        -p 6688:6688 \
                        -v /home/ec2-user/.chainlink:/chainlink \
                        --env-file=/home/ec2-user/.chainlink/.env smartcontract/chainlink:0.10.7 local n \
                        -p /chainlink/.password \
                        -a /chainlink/.api
    Properties:
      AssociatePublicIpAddress: false
      KeyName: !Ref KeyPairName
      ImageId: !Ref ImageId
      IamInstanceProfile: !Ref ChainlinkNodeInstanceProfile
      SecurityGroups:
        - !Ref ChainlinkNodeSecurityGroup
      InstanceType: !Ref ChainlinkNodeInstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref ChainlinkNodeRootVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          # init setup and env
          echo 'chainNetwork=${BlockchainNetwork}' >> /etc/environment
          echo 'ethUrl=${EthereumNodeUrl}' >> /etc/environment
          echo 'psqlUser=${DBMasterUsername}' >> /etc/environment
          echo 'psqlPwd="${DBMasterUserPassword}"' >> /etc/environment
          echo 'psqlHostname=${DBHostname}' >> /etc/environment
          echo 'psqlPort=${DBPort}' >> /etc/environment
          echo 'psqlDb=${DBName}' >> /etc/environment
          echo 'apiUser=${ChainlinkNodeGUIEmail}' >> /etc/environment
          echo 'apiPwd=${ChainlinkNodeGUIPassword}' >> /etc/environment
          echo 'walletPwd=${NodeWalletPassword}' >> /etc/environment
          mkdir /home/ec2-user/.chainlink

          # install and run cfn-boostrap
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ChainlinkNodeLaunchConfiguration --configsets ec2_bootstrap --region ${AWS::Region}

  ChainlinkNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - !Ref ChainlinkNodeRole
  ChainlinkNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'ec2.${AWS::URLSuffix}'
            Action:
              - sts:AssumeRole
      Path: /
      ###### added policy to create logs ######
      # Policies:
      #   - PolicyName: root
      #     PolicyDocument:
      #       Version: 2012-10-17
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - 'logs:CreateLogGroup'
      #             - 'logs:CreateLogStream'
      #             - 'logs:PutLogEvents'
      #             - 'logs:DescribeLogStreams'
      #           Resource:
      #             - 'arn:aws:logs:*:*:*'
      #         - Effect: Allow
      #           Action:
      #             - 'cloudwatch:PutMetricData'
      #             - 'cloudwatch:GetMetricStatistics'
      #             - 'cloudwatch:ListMetrics'
      #           Resource:
      #             - '*'
      #         - Effect: Allow
      #           Action:
      #             - 'ec2:DescribeInstances'
      #           Resource: '*'
      ########################################
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
  ChainlinkNodeTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: 'HTTP'
      Matcher:
        HttpCode: '200'
      Name: 'ChainlinkNodes'
      Port: 6688
      Protocol: 'HTTP'
      VpcId: !GetAtt 
        - VPCStack
        - Outputs.VPCID
  #### added another log group for CFN init ####
  ChainlinkNodeInitLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
      LogGroupName: ChainlinkNodeInitLogGroup