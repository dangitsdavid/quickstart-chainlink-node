  ##########################
  # old-bastion-manual-stack
  ##########################
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enables SSH Access to Bastion Nodes
      VpcId: !GetAtt 
        - VPCStack
        - Outputs.VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref SSHPort
          ToPort: !Ref SSHPort
          CidrIp: !Ref RemoteAccessCIDR
        - IpProtocol: tcp
          FromPort: 6688
          ToPort: 6688
          CidrIp: 0.0.0.0/0
  BastionAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref BastionLaunchConfiguration
      VPCZoneIdentifier:
        - !GetAtt VPCStack.Outputs.PublicSubnet1ID
        - !GetAtt VPCStack.Outputs.PublicSubnet2ID
      MinSize: '1'
      MaxSize: '2'
      Cooldown: '300'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          Value: !Sub 'BastionHost-${AWS::Partition}'
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  BastionLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: true
      KeyName: !Ref KeyPairName
      ImageId: !Ref ImageId
      IamInstanceProfile: !Ref BastionInstanceProfile
      SecurityGroups:
        - !Ref BastionSecurityGroup
      InstanceType: t3.micro
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub 
        - |
          #!/bin/bash
          yum install -y wget jq awscli
          sed -i /etc/ssh/sshd_config \
            -e 's/#Port 22/Port ${SSHPort}/g'
          systemctl restart sshd
        - SSHPort: !Ref SSHPort
  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref BastionHostRole
  BastionHostRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'ec2.${AWS::URLSuffix}'
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'


###### CFN-INIT #######
          #!/bin/bash -x
          # init setup and env
          echo 'chainNetwork=${BlockchainNetwork}' >> /etc/environment
          echo 'ethUrl=${EthereumNodeUrl}' >> /etc/environment
          echo 'psqlUser=${DBMasterUsername}' >> /etc/environment
          echo 'psqlPwd="${DBMasterUserPassword}"' >> /etc/environment
          echo 'psqlHostname=${DBHostname}' >> /etc/environment
          echo 'psqlPort=${DBPort}' >> /etc/environment
          echo 'psqlDb=${DBName}' >> /etc/environment
          echo 'apiUser=${ChainlinkNodeGUIEmail}' >> /etc/environment
          echo 'apiPwd=${ChainlinkNodeGUIPassword}' >> /etc/environment
          echo 'walletPwd=${NodeWalletPassword}' >> /etc/environment
          mkdir /home/ec2-user/.chainlink
          mkdir /home/ec2-user/.chainlink/tls
          # install quickstart-linux-utilities
          until git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git; do echo "Retrying"; done
          cd /quickstart-linux-utilities
          source quickstart-cfn-tools.source
          qs_update-os || qs_err
          qs_bootstrap_pip || qs_err
          qs_aws-cfn-bootstrap || qs_err
          # Set Log Group Name (TODO: create qs_cloudwatch_loggroup_set)
          sed -i "s/__LOGGROUP__/${ChainlinkNodeInitLogGroup}/g" cloudwatch_logs.stub
          echo "Install CloudWatch agent"
          qs_cloudwatch_install || qs_err
          # CFN Debug Logs
          qs_cloudwatch_tracklog /var/lib/cloud/instance/scripts/part-001
          qs_cloudwatch_tracklog /var/log/cloud-init.log
          qs_cloudwatch_tracklog /var/log/cloud-init-output.log
          qs_cloudwatch_tracklog /var/log/cfn-init.log
          qs_cloudwatch_tracklog /var/log/cfn-init-cmd.log
          # execute cfn-init
          echo "Executing cfn-init"
          cfn-init -v --stack ${AWS::StackName} --resource ChainlinkNodeLaunchConfiguration --configsets ec2_bootstrap --region ${AWS::Region} || cfn_fail
          # Signal cfn-init (final check)
          [ $(qs_status) == 0 ] && cfn_success || cfn_fail